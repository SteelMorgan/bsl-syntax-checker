# –¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π MCP –ø—Ä–æ—Ç–æ–∫–æ–ª–∞
# –ê–≤—Ç–æ—Ä: AI Assistant
# –î–∞—Ç–∞: 2025-10-25

Write-Host "üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô MCP –ü–†–û–¢–û–ö–û–õ–ê" -ForegroundColor Green
Write-Host "================================================" -ForegroundColor Green

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—â–µ–Ω –ª–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
$containerName = "mcp-bsl-server-checker"
$containerStatus = docker ps --filter "name=$containerName" --format "{{.Names}}" 2>$null

if (-not $containerStatus) {
    Write-Host "‚ùå –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä $containerName –Ω–µ –∑–∞–ø—É—â–µ–Ω!" -ForegroundColor Red
    Write-Host "–ó–∞–ø—É—Å—Ç–∏—Ç–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∫–æ–º–∞–Ω–¥–æ–π:" -ForegroundColor Yellow
    Write-Host "docker run --rm -d --name $containerName -e MCP_TRANSPORT=http -p 9090:9090 -p 8080:8080 -v `"D:\My Projects\Projects 1C:/workspaces:ro`" mcp-bsl-server:latest" -ForegroundColor Cyan
    exit 1
}

Write-Host "‚úÖ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä $containerName –∑–∞–ø—É—â–µ–Ω" -ForegroundColor Green

# –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
Write-Host "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è..." -ForegroundColor Yellow
Start-Sleep -Seconds 5

# –¢–µ—Å—Ç 1: MCP Initialize
Write-Host "`nüß™ –¢–ï–°–¢ 1: MCP Initialize" -ForegroundColor Cyan
$initBody = '{"jsonrpc":"2.0","id":1,"method":"initialize","params":{"protocolVersion":"2024-11-05","capabilities":{"tools":{}}}}'
try {
    $initResponse = Invoke-WebRequest -Uri "http://localhost:9090/mcp" -Method POST -Body $initBody -ContentType "application/json" -UseBasicParsing
    $initResult = $initResponse.Content | ConvertFrom-Json
    
    if ($initResult.jsonrpc -eq "2.0" -and $initResult.result.protocolVersion -eq "2024-11-05") {
        Write-Host "‚úÖ MCP Initialize —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!" -ForegroundColor Green
        Write-Host "   Server: $($initResult.result.serverInfo.name) v$($initResult.result.serverInfo.version)" -ForegroundColor White
    } else {
        Write-Host "‚ùå MCP Initialize –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!" -ForegroundColor Red
        Write-Host "   –û—Ç–≤–µ—Ç: $($initResponse.Content)" -ForegroundColor Red
    }
} catch {
    Write-Host "‚ùå –û—à–∏–±–∫–∞ MCP Initialize: $($_.Exception.Message)" -ForegroundColor Red
}

# –¢–µ—Å—Ç 2: MCP Tools List
Write-Host "`nüß™ –¢–ï–°–¢ 2: MCP Tools List" -ForegroundColor Cyan
$toolsBody = '{"jsonrpc":"2.0","id":2,"method":"tools/list","params":{}}'
try {
    $toolsResponse = Invoke-WebRequest -Uri "http://localhost:9090/mcp" -Method POST -Body $toolsBody -ContentType "application/json" -UseBasicParsing
    $toolsResult = $toolsResponse.Content | ConvertFrom-Json
    
    if ($toolsResult.jsonrpc -eq "2.0" -and $toolsResult.result.tools.Count -gt 0) {
        Write-Host "‚úÖ MCP Tools List —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!" -ForegroundColor Green
        Write-Host "   –ù–∞–π–¥–µ–Ω–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤: $($toolsResult.result.tools.Count)" -ForegroundColor White
        foreach ($tool in $toolsResult.result.tools) {
            Write-Host "   - $($tool.name): $($tool.description)" -ForegroundColor White
        }
    } else {
        Write-Host "‚ùå MCP Tools List –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!" -ForegroundColor Red
        Write-Host "   –û—Ç–≤–µ—Ç: $($toolsResponse.Content)" -ForegroundColor Red
    }
} catch {
    Write-Host "‚ùå –û—à–∏–±–∫–∞ MCP Tools List: $($_.Exception.Message)" -ForegroundColor Red
}

# –¢–µ—Å—Ç 3: MCP Tools Call - Analyze
Write-Host "`nüß™ –¢–ï–°–¢ 3: MCP Tools Call - Analyze" -ForegroundColor Cyan
$analyzeBody = '{"jsonrpc":"2.0","id":3,"method":"tools/call","params":{"name":"bslcheck_analyze","arguments":{"srcDir":"/workspaces","reporters":["json"],"language":"ru"}}}'
try {
    $analyzeResponse = Invoke-WebRequest -Uri "http://localhost:9090/mcp" -Method POST -Body $analyzeBody -ContentType "application/json" -UseBasicParsing
    $analyzeResult = $analyzeResponse.Content | ConvertFrom-Json
    
    if ($analyzeResult.jsonrpc -eq "2.0" -and $analyzeResult.result.content) {
        Write-Host "‚úÖ MCP Tools Call —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!" -ForegroundColor Green
        Write-Host "   –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –ø–æ–ª—É—á–µ–Ω" -ForegroundColor White
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        $content = $analyzeResult.result.content[0].text
        if ($content.Length -gt 200) {
            $content = $content.Substring(0, 200) + "..."
        }
        Write-Host "   –°–æ–¥–µ—Ä–∂–∏–º–æ–µ: $content" -ForegroundColor White
    } else {
        Write-Host "‚ùå MCP Tools Call –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!" -ForegroundColor Red
        Write-Host "   –û—Ç–≤–µ—Ç: $($analyzeResponse.Content)" -ForegroundColor Red
    }
} catch {
    Write-Host "‚ùå –û—à–∏–±–∫–∞ MCP Tools Call: $($_.Exception.Message)" -ForegroundColor Red
}

# –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ Web UI
Write-Host "`nüß™ –¢–ï–°–¢ 4: Web UI –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å" -ForegroundColor Cyan
try {
    $webResponse = Invoke-WebRequest -Uri "http://localhost:9090" -UseBasicParsing
    if ($webResponse.StatusCode -eq 200) {
        Write-Host "‚úÖ Web UI –¥–æ—Å—Ç—É–ø–µ–Ω!" -ForegroundColor Green
        Write-Host "   URL: http://localhost:9090" -ForegroundColor White
    } else {
        Write-Host "‚ùå Web UI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω!" -ForegroundColor Red
    }
} catch {
    Write-Host "‚ùå –û—à–∏–±–∫–∞ Web UI: $($_.Exception.Message)" -ForegroundColor Red
}

# –¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ Swagger UI
Write-Host "`nüß™ –¢–ï–°–¢ 5: Swagger UI –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å" -ForegroundColor Cyan
try {
    $swaggerResponse = Invoke-WebRequest -Uri "http://localhost:9090/swagger-ui" -UseBasicParsing
    if ($swaggerResponse.StatusCode -eq 200) {
        Write-Host "‚úÖ Swagger UI –¥–æ—Å—Ç—É–ø–µ–Ω!" -ForegroundColor Green
        Write-Host "   URL: http://localhost:9090/swagger-ui" -ForegroundColor White
    } else {
        Write-Host "‚ùå Swagger UI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω!" -ForegroundColor Red
    }
} catch {
    Write-Host "‚ùå –û—à–∏–±–∫–∞ Swagger UI: $($_.Exception.Message)" -ForegroundColor Red
}

Write-Host "`nüéâ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!" -ForegroundColor Green
Write-Host "================================================" -ForegroundColor Green
Write-Host "`nüìã –†–ï–ó–£–õ–¨–¢–ê–¢–´:" -ForegroundColor Yellow
Write-Host "‚úÖ MCP –ø—Ä–æ—Ç–æ–∫–æ–ª –∏—Å–ø—Ä–∞–≤–ª–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ" -ForegroundColor Green
Write-Host "‚úÖ Cursor IDE —Ç–µ–ø–µ—Ä—å –±—É–¥–µ—Ç –≤–∏–¥–µ—Ç—å —Å–ø–∏—Å–æ–∫ tools" -ForegroundColor Green
Write-Host "‚úÖ –ó–∞–ø—Ä–æ—Å—ã analyze –±—É–¥—É—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ –æ—à–∏–±–æ–∫" -ForegroundColor Green
Write-Host "‚úÖ Web UI –∏ Swagger –¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞" -ForegroundColor Green

Write-Host "`nüîß –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:" -ForegroundColor Yellow
Write-Host "1. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ Cursor IDE" -ForegroundColor White
Write-Host "2. –û–±–Ω–æ–≤–∏—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é MCP –≤ Cursor" -ForegroundColor White
Write-Host "3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MCP —Å–µ—Ä–≤–µ—Ä—É" -ForegroundColor White